#+BLOG: wordpress
#+POSTID: 513
#+OPTIONS: toc:3
#+OPTIONS: todo:t
#+TITLE: Installing and configuring Arch Linux on Thinkpad X1 Carbon
#+DATE: <2016-06-04 Sat>
#+AUTHOR: Robert Kozikowski
#+EMAIL: r.kozikowski@gmail.com
* Introduction
I recently configured Arch Linux on the new Thinkpad X1 Carbon (4th generation) with dual booting to the pre-installed Windows 10 (for games I occasionally play).
It should be mostly similar on modern laptops with GPT/UEFI.
Even if Arch wiki is very comprehensive, it needs a bit of reading to decide what is right for the particular hardware.
Dual booting with windows and UEFI/GPT are not as well documented as the plain old linux installations.
[[https://raw.githubusercontent.com/kozikow/kozikow-blog/master/arch.org][This post was written in and is readable in the Emacs org mode format]].
* Base installation
Mostly steps from https://wiki.archlinux.org/index.php/beginners'_guide, with customization for uefi and gpt.
** Prepare USB stick (on other computer with Ubuntu Linux 14.04)
*** Download
I downloaded the =2016.06.01= image via torrent from https://www.archlinux.org/download/.
*** Upload it to the usb stick
Article: https://wiki.archlinux.org/index.php/USB_flash_installation_media
**** Find out the name of your USB drive with lsblk
#+BEGIN_SRC bash :results output
  lsblk | grep media
#+END_SRC
**** Make sure that it is not mounted.
#+BEGIN_SRC bash :results output
  umount /dev/sdb1
#+END_SRC
**** Burn the image with dd
#+BEGIN_SRC bash :results output
  cd ~/Downloads
  sudo dd bs=4M if=archlinux-2016.06.01-dual.iso of=/dev/sdb && sync
#+END_SRC
**** Verify
Re-plug the usb and:
#+BEGIN_SRC bash :results output
  ls /media/kozikow/ARCH*
#+END_SRC

#+BEGIN_EXAMPLE
 arch EFI isolinux loader
#+END_EXAMPLE
** Prepare Windows 10 for dual booting
You may want to take a look at [[https://wiki.archlinux.org/index.php/Dual_boot_with_Windows][Dual boot with Windows wiki entry]].
*** Shrink the Windows partition from Windows
Even if partition resizing is also supported from Linux, I feel like it's safer to do it from Windows.
1. Press start button
2. Search for "Create and format hard disk partitions"
3. Right click C:/ and "Shrink Volume"
**** Shrinking limitations
Windows only lets me to reclaim 233 gb out of 474 gb.
I tried defragmentation or cleaning up some unnecessary files with no luck.
I think it's not that bad, since I can mount the NTFS partition from arch.
Therefore, I can keep the most space hungry files like movies on this partition.
*** Check that Windows boots into the UEFI/GPT mode
You can check it on Windows in System Information->BIOS mode
You may consider reading about [[https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface][UEFI]] and [[https://wiki.archlinux.org/index.php/GUID_Partition_Table][GPT]].
If we want to dual boot with the existing Windows we need to use UEFI for Arch as well.
*** [[https://wiki.archlinux.org/index.php/Dual_boot_with_Windows#Fast_Start-Up][Disable Fast Startup]]
If you don't, Linux NTFS driver may damage the NTFS disk.
[[http://www.tenforums.com/tutorials/4189-fast-startup-turn-off-windows-10-a.html][Windows 10 instructions.]]
** Boot Arch Linux
*** Disable secure boot
It prevents Arch from booting.
1. Restart computer
2. Press Enter
3. F1->Security->Secure Boot
4. Change to disabled
5. Save and restart
*** Boot
1. Press Enter
2. F12
3. Choose usb stick
4. Arch
** Adjust tty font size
Default tty font size if very small due to the high screen resolution.
You can adjust it with:
#+BEGIN_SRC bash :results output
  cd /usr/share/kbd/consolefonts
  ls | grep -P "[2-9]\d+\.ps" # Find big fonts
  setfont latarcyrheb-sun32
#+END_SRC
It's a good idea to persist the font. Add it later to =/etc/vconsole.conf=, after you install a new OS:
#+BEGIN_SRC bash :results output
  KEYMAP=us
  FONT=latarcyrheb-sun32
#+END_SRC
** Create partitions
*** [[*Shrink the Windows partition from Windows][I already shrinked the Windows partition from Windows]]
*** No swap partition
Since the laptop have 8 GB of RAM it's plenty.
Since 8 GB is more than plenty for a desktop, if OS would run out of 8 GBs it likely means that some program leaks memory and it's better to fail fast.
If I decide afterwards that I need it for features like hibernation I can always use a [[https://wiki.archlinux.org/index.php/swap#Swap_file][swap file]].
*** [[https://wiki.archlinux.org/index.php/EFI_System_Partition][EFI system partition]] already exists
Since laptop came with the UEFI support, the EFI system partition already exists.
You can check it by
#+BEGIN_SRC bash
  gdisk /dev/sda
#+END_SRC
*p* to list partition table.
See that the first entry (/dev/sda1) is the "EFI system partition"
*** Create partition for Arch with [[https://wiki.archlinux.org/index.php/Fdisk#GPT_.28gdisk.29][gdisk]]
I decided I'll go with a single Linux partition, since my movies and music will be stored on the NTFS partition.
I used gdisk to create a new partition. gdisk is installed by default on the usb stick.
#+BEGIN_SRC bash
  gdisk /dev/sda
#+END_SRC
*p* to list all partition tables. Based on this I found that my new partition should be placed between sectors 507793408 and 998166527.
*n* to create a new partition. All default options were reasonable.
*w* to save
**** Verify that the new partition is there
#+BEGIN_SRC bash :results output
  lsblk
#+END_SRC
** Format and mount partitions
[[https://wiki.archlinux.org/index.php/Solid_State_Drives][You may want to read an arch wiki about SSDs.]]
*** I went for ext4.
*** Why not F2FS?
Since the laptop have the SSD, I was contemplating trying out the [[https://wiki.archlinux.org/index.php/F2FS][F2FS]].
It's only [[https://www.phoronix.com/scan.php?page=news_item&px=Linux-4.4-FS-4-Way][slightly faster according to some benchmarks]].
ext4 have [[https://en.wikipedia.org/wiki/Ext4#Features][additional features]] and is more standard so it seems like safer bet.

I have been thinking that maybe F2FS would result in less "SSD tear".
I have been reading than in "desktop" usage SSD tear is almost never an issue
and other components in laptop would fail first, so we don't have to worry about it.
*** Why not ext3?
[[https://en.wikipedia.org/wiki/Ext4#Compatibility_with_Windows_and_Macintosh][There exist some drivers that let windows read and copy files from ext filesystem.]]
Even if support for using ext4 from Windows is worse than ext3, I won't be using Windows often.
If you plan to frequently boot to Windows you may consider ext3 for better Windows compatibility. 
*** Format and mount the Linux partition
#+BEGIN_SRC bash :results output
  lsblk /dev/sda
  mkfs.ext4 /dev/sda5
  mount /dev/sda5 /mnt
#+END_SRC
*** /boot partition
Section about EFISTUB may be a bit confusing.
Note that most EFI boot loaders are EFISTUBs themselves (they both create EFI
entries). Bootling Linux using the kernel EFISTUB means you just skip the
bootloader.

Since I don't plan to use EFISTUB as a bootloader and use systemd-boot,
I just need to mount our EFI system partition at /mnt/boot.
#+BEGIN_SRC bash :results output
  mkdir -p /mnt/boot
  mount /dev/sda1 /mnt/boot
#+END_SRC
** Connect to internet
#+BEGIN_SRC bash
  iw dev # Find an interfrace
  wifi-menu -o wlp4s0 # pass an interface from the previous command
#+END_SRC
** Base install
#+BEGIN_SRC bash :results output
  pacstrap -i /mnt base base-devel
#+END_SRC
** genfstab
#+BEGIN_SRC bash :results output
  genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC
** Netctl
#+BEGIN_SRC bash :results output
  cp -R /etc/netctl /mnt/etc/netctl
#+END_SRC
** arch-chroot
#+BEGIN_SRC bash :results output
  arch-chroot /mnt /bin/bash
#+END_SRC
** Locale and time zone
#+BEGIN_SRC bash :results output
  # Uncomment en_GB.UTF-8 UTF-8 in /etc/locale.gen
  locale-gen
  echo "LANG=en_GB.UTF-8" > /etc/locale.conf
  tzselect
  ln -s /usr/share/zoneinfo/Europe/London /etc/localtime
  hwclock --systohc --utc
#+END_SRC
I must admit that I had some issues with GB locale after the installation.
I switched to US locale and I did not have problems with it yet.
IMO, even if you are in the UK, more things will work as you expect when you go with the US locale.

Also, if you install gnome, it stores it's own locale settings and you need to set them later.
To set it, I recommend installing =gnome-initial-setup= and restarting the X server.
** [[https://wiki.archlinux.org/index.php/beginners'_guide#Initramfs][initramfs]]
Run:
#+BEGIN_SRC bash :results output
  mkinitcpio -p linux
#+END_SRC

*** Missing vmlinuz-linux problem
Initially I have been getting an error:
#+BEGIN_EXAMPLE
ERROR: specified kernel image does not exist; /boot/vmlinuz-linux
#+END_EXAMPLE

The problem was that I mounted the /mnt/boot after running the pacstrap.
Pacstrap writes the vmlinuz-linux to /mnt/boot.
*** Missing firmware problem
I also got some warnings about some missing firmware.
#+BEGIN_EXAMPLE
Warning: Possibly missing firmware wd719x
Possibly missing firmware aic94xx
#+END_EXAMPLE
Strangely the problem somehow resolved itself.
Probably the modules got pulled by some big package like xorg after I enabled AUR (extended repository of packages).
As [[https://bbs.archlinux.org/viewtopic.php?id=194977][this post mentions]], missing firmware can be found in AUR.

After it is installed:
#+BEGIN_SRC bash :results output 
  modinfo wd719x | grep description
  modinfo aic94xx | grep description
#+END_SRC

#+BEGIN_EXAMPLE
description:    Western Digital WD7193/7197/7296 SCSI driver
description:    Adaptec aic94xx SAS/SATA driver
#+END_EXAMPLE
** Boot Loader
After brief investigation, I decided that I prefer the [[https://wiki.archlinux.org/index.php/Systemd-boot][systemd-boot]]
as an x86_64 [[https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface][UEFI]] bootloader.
*** Install systemd-boot
#+BEGIN_SRC bash :results output
  bootctl install
#+END_SRC
*** =/boot/loader/loader.conf=
#+BEGIN_EXAMPLE
timeout 4
default arch
editor 0
#+END_EXAMPLE
*** =/boot/loader/entries/arch.conf=
#+BEGIN_SRC bash :results output
  title          Arch Linux
  linux          /vmlinuz-linux
  initrd         /initramfs-linux.img
  options        root=PARTUUID=c0181663-6019-4a2c-b45a-ab6c112f1aa0 rw
#+END_SRC

PARTUUID is a GUID of your new partition. Beware that GUID is case sensitive in this case.
You can find it using:
#+BEGIN_SRC bash :results output
  blkid -s PARTUUID -o value /dev/sdb5
#+END_SRC
*** No need for windows entry in =/boot/loader/entries/=
systemd-boot auto-detects Windows, so there is no need for the windows entry.
My =/boot/loader/entries/= directory only contains arch.conf and I can dual boot to Windows.
** Network
[[https://wiki.archlinux.org/index.php/beginners'_guide#Configure_the_network][Follow steps from the wiki.]]
** Set password
#+BEGIN_SRC bash :results output
  passwd
#+END_SRC
* After rebooting to the new system
At this point I am able to dual boot to Arch/Windows.
A few more things after rebooting:
** Create the user
#+BEGIN_SRC bash :results output
  useradd -m kozikow
  passwd kozikow
  visudo # in this file configure your user as a sudoer
  reboot
#+END_SRC
** libgl
There were 4 alternative libgl implementations. I went for mesa-libgl, since 
alternatives were from nvidia and this thinkpad has an integrated intel graphics card.
** x86-input
I had a choice between =x86-input-evdev= and =x86-input-libinput=.
After reading [[https://wiki.archlinux.org/index.php/Libinput][two]] [[https://www.reddit.com/r/archlinux/comments/48tqj9/difference_between_libinput_and_evdev/][articles]] I decided to go with =x86-input-libinput=.
[[https://www.reddit.com/r/archlinux/comments/48tqj9/difference_between_libinput_and_evdev/d0o266t][Some user mentioned: "With xf86-input-libinput, the trackpoint(and middle button scrolling) works out of the box on my ThinkPad, while xf86-input-evdev requires some additional settings".]]

Personally, using libinput everything worked out of the box, including track pad, track point and keyboard "extra" keys (e.g. sound up).
The only annoyance was too slow track point.
*** Adjust trackpoint sensitivity
The only annoyance was too slow trackpoint.
Methods from arch wiki didn't work for me, probably since they were meant for the old evdev.
**** Xinput method
#+BEGIN_SRC bash :results output
  pacman -S xorg-xinput
  xinput list | grep TrackPoint # Find an id of tracpoint. 12 in my case.
  xinput --set-prop 12 'libinput Accel Speed' 1.0
#+END_SRC


Pesisting this method requires adding the set-prop command to the .xinitrc.
**** Device parameters method
=/usr/local/bin/my_init.sh=:
#+BEGIN_SRC bash :results output
  echo 180 > /sys/bus/serio/devices/serio2/sensitivity
#+END_SRC
Even if there are multiple devices in /sys/bus/serio/devices/, only the touchpad have a sensitivity file present. [[https://bugzilla.redhat.com/show_bug.cgi?id=1200717#c2][Also see this post]].


Persisting this method requires adding a systemd service.
=/etc/systemd/system/my_init.service=
#+BEGIN_EXAMPLE
[Unit]
Description=My initialization scripts

[Service]
ExecStart=/usr/local/bin/my_init.sh

[Install]
WantedBy=multi-user.target 
#+END_EXAMPLE
**** Value range
xinput method ranges between -1.0 and 1.0.
sensitivity ranges between 128 and 250.
Personally I like my trackpoint quite speedy and I went for 1.0/180.
It requires some initial adjustment, but afterwards is more efficient.
** (optional) xorg and gnome
#+BEGIN_SRC bash :results output
  pacman -S gnome gnome-initial-setup xorg-xinit xterm xorg-utils
  echo "exec gnome-session" >> ~/.xinitrc
  startx
#+END_SRC
** Other hardware
So far, other hardware components I used (e.g. graphics and music) worked without any additional setup.
* You are on your own now
At this point, you should be close to the point where distribution with graphical installer like ubuntu leave you,
but you skiped all the adware.
From now on, everything is up to the personal preference.
* Additional links
** Thinkpad Carbon arch wiki entries
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon_(Gen_2)
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon_(Gen_3)

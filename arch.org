#+BLOG: wordpress
#+POSTID: 513
#+TITLE: Installing and configuring Arch Linux on Thinkpad X1 Carbon
#+DATE: <2016-06-04 Sat>
#+AUTHOR: Robert Kozikowski
#+EMAIL: r.kozikowski@gmail.com
* Introduction
I recently configured Arch Linux on the new Thinkpad X1 Carbon (4th generation) with dual booting to the pre-installed Windows 10 (for games I occasionally play).
It should be mostly similar on modern laptops with GPT/UEFI.
[[https://raw.githubusercontent.com/kozikow/kozikow-blog/master/arch.org][This post was written in and is readable in the Emacs org mode format]].
* Base installation
Mostly steps from https://wiki.archlinux.org/index.php/beginners'_guide, with customization for uefi and gpt.
** Prepare USB stick (on other computer with Ubuntu Linux 14.04)
*** Download
I downloaded the =2016.06.01= image via torrent from https://www.archlinux.org/download/.
*** Upload it to the usb stick
Article: https://wiki.archlinux.org/index.php/USB_flash_installation_media
**** Find out the name of your USB drive with lsblk
#+BEGIN_SRC bash :results output
  lsblk | grep media
#+END_SRC
**** Make sure that it is not mounted.
#+BEGIN_SRC bash :results output
  umount /dev/sdb1
#+END_SRC
**** Burn the image with dd
#+BEGIN_SRC bash :results output
  cd ~/Downloads
  sudo dd bs=4M if=archlinux-2016.06.01-dual.iso of=/dev/sdb && sync
#+END_SRC
**** Verify
Re-plug the usb and:
#+BEGIN_SRC bash :results output
  ls /media/kozikow/ARCH*
#+END_SRC

#+BEGIN_EXAMPLE
 arch EFI isolinux loader
#+END_EXAMPLE
** Prepare Windows 10 for dual booting
You may want to take a look at [[https://wiki.archlinux.org/index.php/Dual_boot_with_Windows][Dual boot with Windows wiki entry]].
*** Shrink the Windows partition from Windows
Even if partition resizing is also supported from Linux, I feel like it's safer to do it from Windows.
1. Press start button
2. Search for "Create and format hard disk partitions"
3. Right click C:/ and "Shrink Volume"
**** Shrinking limitations
Windows only lets me to reclaim 233 gb out of 474 gb.
I tried defragmentation or cleaning up some unnecessary files with no luck.
I think it's not that bad, since I can mount the NTFS partition from arch.
Therefore, I can keep the most space hungry files like movies on this partition.
*** Check that Windows boots into the UEFI/GPT mode
You can check it on Windows in System Information->BIOS mode
You may consider reading about [[https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface][UEFI]] and [[https://wiki.archlinux.org/index.php/GUID_Partition_Table][GPT]].
If we want to dual boot with the existing Windows we need to use UEFI for Arch as well.
*** [[https://wiki.archlinux.org/index.php/Dual_boot_with_Windows#Fast_Start-Up][Disable Fast Startup]]
If you don't, Linux NTFS driver may damage the NTFS disk.
[[http://www.tenforums.com/tutorials/4189-fast-startup-turn-off-windows-10-a.html][Windows 10 instructions.]]
** Boot Arch Linux
*** Disable secure boot
It prevents Arch from booting.
1. Restart computer
2. Press Enter
3. F1->Security->Secure Boot
4. Change to disabled
5. Save and restart
*** Boot
1. Press Enter
2. F12
3. Choose usb stick
4. Arch
** Adjust tty font size
Default tty font size if very small due to the high screen resolution.
You can adjust it with:
#+BEGIN_SRC bash :results output
  cd /usr/share/kbd/consolefonts
  ls | grep -P "[2-9]\d+\.ps" # Find big fonts
  setfont latarcyrheb-sun32
#+END_SRC
It's a good idea to persist the font. Add it later to =/etc/vconsole.conf=, after you install a new OS:
#+BEGIN_SRC bash :results output
  KEYMAP=us
  FONT=latarcyrheb-sun32
#+END_SRC
** Create partitions
*** [[*Shrink the Windows partition from Windows][I already shrinked the Windows partition from Windows]]
*** No swap partition
Since the laptop have 8 GB of RAM it's not necessary, and if I decide I need it I can always use a [[https://wiki.archlinux.org/index.php/swap#Swap_file][swap file]].
*** [[https://wiki.archlinux.org/index.php/EFI_System_Partition][EFI system partition]] already exists
Since laptop came with the UEFI support, the EFI system partition already exists.
You can check it by
#+BEGIN_SRC bash
  gdisk /dev/sda
#+END_SRC
*p* to list partition table.
See that the first entry (/dev/sda1) is the "EFI system partition"
*** Create partition for Arch with [[https://wiki.archlinux.org/index.php/Fdisk#GPT_.28gdisk.29][gdisk]]
I decided I'll go with a single Linux partition, since my movies and music will be stored on the NTFS partition.
I used gdisk to create a new partition. gdisk is installed by default on the usb stick.
#+BEGIN_SRC bash
  gdisk /dev/sda
#+END_SRC
*p* to list all partition tables. Based on this I found that my new partition should be placed between sectors 507793408 and 998166527.
*n* to create a new partition. All default options were reasonable.
*w* to save
**** Verify that the new partition is there
#+BEGIN_SRC bash :results output
  lsblk
#+END_SRC
** Format and mount partitions
Since the laptop have the SSD, I was contemplating trying out the [[https://wiki.archlinux.org/index.php/F2FS][F2FS]].
It's only [[https://www.phoronix.com/scan.php?page=news_item&px=Linux-4.4-FS-4-Way][slightly faster according to some benchmarks]], so I decided to go with the ext4, since it's more standard.
[[https://wiki.archlinux.org/index.php/Solid_State_Drives][You may also want to read an arch wiki about SSDs.]]
*** Format and mount the Linux partition
#+BEGIN_SRC bash :results output
  lsblk /dev/sda
  mkfs.ext4 /dev/sda5
  mount /dev/sda5 /mnt
#+END_SRC
*** /boot partition
Section about EFISTUB may be a bit confusing.
Note that most EFI boot loaders are EFISTUBs themselves (they both create EFI
entries). Bootling Linux using the kernel EFISTUB means you just skip the
bootloader.

Since I don't plan to use EFISTUB as a bootloader and use systemd-boot,
I just need to mount our EFI system partition at /mnt/boot.
#+BEGIN_SRC bash :results output
  mkdir -p /mnt/boot
  mount /dev/sda1 /mnt/boot
#+END_SRC
** Connect to internet
#+BEGIN_SRC bash
  iw dev # Find an interfrace
  wifi-menu -o wlp4s0 # pass an interface from the previous command
#+END_SRC
** Base install
#+BEGIN_SRC bash :results output
  pacstrap -i /mnt base base-devel
#+END_SRC
** genfstab
#+BEGIN_SRC bash :results output
  genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC
** Netctl
#+BEGIN_SRC bash :results output
  cp -R /etc/netctl /mnt/etc/netctl
#+END_SRC
** arch-chroot
#+BEGIN_SRC bash :results output
  arch-chroot /mnt /bin/bash
#+END_SRC
** Local and time zone
#+BEGIN_SRC bash :results output
  # Uncomment en_GB.UTF-8 UTF-8 in /etc/locale.gen
  locale-gen
  echo "LANG=en_GB.UTF-8" > /etc/locale.conf
  tzselect
  ln -s /usr/share/zoneinfo/Europe/London /etc/localtime
  hwclock --systohc --utc
#+END_SRC
** [[https://wiki.archlinux.org/index.php/beginners'_guide#Initramfs][initramfs]]
Run:
#+BEGIN_SRC bash :results output
  mkinitcpio -p linux
#+END_SRC

Initially I have been getting an error:
#+BEGIN_EXAMPLE
ERROR: specified kernel image does not exist; /boot/vmlinuz-linux
#+END_EXAMPLE

The problem was that I mounted the /mnt/boot after running the pacstrap.
I got some warnings I did not diagnose yet:
*** TODO Warning: Possibly missing firmware wd719x
*** TODO Warning: Possibly missing firmware aic94xx
** Boot Loader
After brief investigation, I decided that I prefer the [[https://wiki.archlinux.org/index.php/Systemd-boot][systemd-boot]]
as an x86_64 [[https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface][UEFI]] bootloader.
*** Install systemd-boot
#+BEGIN_SRC bash :results output
  bootctl install
#+END_SRC
*** =/boot/loader/loader.conf=
#+BEGIN_EXAMPLE
timeout 4
default arch
editor 0
#+END_EXAMPLE
*** =/boot/loader/entries/arch.conf=
#+BEGIN_SRC bash :results output
  title          Arch Linux
  linux          /vmlinuz-linux
  initrd         /initramfs-linux.img
  options        root=PARTUUID=c0181663-6019-4a2c-b45a-ab6c112f1aa0 rw
#+END_SRC

PARTUUID is a GUID of your new partition. Beware that GUID is case sensitive in this case.
You can find it using:
#+BEGIN_SRC bash :results output
  blkid -s PARTUUID -o value /dev/sdb5
#+END_SRC
*** No need for windows entry in =/boot/loader/entries/=
systemd-boot auto-detects Windows, so there is no need for the windows entry.
My =/boot/loader/entries/= directory only contains arch.conf and I can dual boot to Windows.
** Network
[[https://wiki.archlinux.org/index.php/beginners'_guide#Configure_the_network][Follow steps from the wiki.]]
** Set password
#+BEGIN_SRC bash :results output
  passwd
#+END_SRC
* After rebooting to the new system
At this point I am able to dual boot to Arch/Windows.
A few more things after rebooting:
** Create the user
#+BEGIN_SRC bash :results output
  useradd -m kozikow
  passwd kozikow
  visudo # in this file configure your user as a sudoer
  reboot
#+END_SRC
** libgl
There were 4 alternative libgl implementations. I went for mesa-libgl, since 
alternatives were from nvidia and this thinkpad has an integrated intel graphics card.
** x86-input
I had a choice between =x86-input-evdev= and =x86-input-libinput=.
After reading [[https://wiki.archlinux.org/index.php/Libinput][two]] [[https://www.reddit.com/r/archlinux/comments/48tqj9/difference_between_libinput_and_evdev/][articles]] I decided to go with =x86-input-libinput=.
[[https://www.reddit.com/r/archlinux/comments/48tqj9/difference_between_libinput_and_evdev/d0o266t][Some user mentioned: "With xf86-input-libinput, the trackpoint(and middle button scrolling) works out of the box on my ThinkPad, while xf86-input-evdev requires some additional settings".]]

With libinput touch pad and track point worked without additional configuration.
The only annoyance was too slow trackpoint.
[[https://bugzilla.redhat.com/show_bug.cgi?id=1200717#c2][As this comment mentions]], this will increase touchpad speed:
#+BEGIN_SRC bash :results output
  su
  echo 250 > /sys/bus/serio/devices/serio2/sensitivity
#+END_SRC
Methods from arch wiki didn't work for me, probably since they were meant for the old evdev.
Even if there are multiple devices in /sys/bus/serio/devices/, only the touchpad sensitivity file present.
** (optional) xorg and gnome
#+BEGIN_SRC bash :results output
  pacman -S gnome gnome-initial-setup xorg-xinit xterm xorg-utils
  echo "exec gnome-session" >> ~/.xinitrc
  startx
#+END_SRC
** Other hardware
So far, other hardware components I used (e.g. graphics and music) worked without any additional setup.
* You are on your own now
From this point, everything is up to the personal preference.
* Additional links
** Thinkpad Carbon arch wiki entries
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon_(Gen_2)
https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Carbon_(Gen_3)

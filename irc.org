#+BLOG: wordpress
#+POSTID: 603
#+DATE: [2016-06-11 Sat 23:34]
#+BLOG: wordpress
#+OPTIONS: toc:3
#+OPTIONS: todo:t
#+TITLE: Set up ERC, Emacs IRC client, with automated windowed layout and connection
#+AUTHOR: Robert Kozikowski
#+EMAIL: r.kozikowski@gmail.com
* Introduction
I've set up an Emacs function =my-irc-setup= that connects to all IRC channels I am interested in
and sets up a 2x2 layout with the channels:
#+ATTR_HTML: :border 2 :rules all :frame all
|--------------------------------+-----------------------|
| #ensime/ensime-server (gitter) | #archlinux (freenode) |
|--------------------------------+-----------------------|
| #ensime/ensime-emacs (gitter)  | #emacs (freenode)     |
|--------------------------------+-----------------------|
It saves the layout using the window-configuration-to-register.
I can jump to this layout with =C-x r j 9=. [[https://www.emacswiki.org/emacs/WindowsAndRegisters][See documentation about window-configuration-to-register]].
It also saves previous window layout under =C-x r j 8=.
You can save an layout at any time with =C-x r w=.
* Erc support for sasl
Erc support for sasl is a bit hacky.
circe supports it better, but it didn't work with gitter.

Install erc-sasl: https://github.com/joseph-gay/erc-sasl/blob/sasl/erc-sasl.el .
Rather than installing whole erc-sasl, I installed standard ERC via =package-install=,
and just checked in above file to my emacs config and added =(require 'erc)=.
* Needs adaptation for non-evil.
I used evil functions for things like =evil-window-vsplit=. Non-evil should be quite easy to find, like =split-window-vertically=.
Let me know if you adapt it to non-evil.
* gitter irc support.
Follow instructions from https://irc.gitter.im/ to get the irc password.
* Problem with auto connection
For some reason, even if config tells erc to auto connect to freenode channels it doesn't.
I had to manually join them in =my-freenode-force-join=.
* Base configuration
Code is quite hacky, but it's single purpose. I know I shouldn't hardcode passwords in my .el config.

Just add below to your emacs config, add your nick/password in my-join-irc, and call my-join-irc.
Joining my take a few seconds, but you don't need to do anything manually.
#+BEGIN_SRC clojure :results output
  (require 'erc-sasl)
  (setq
   erc-prompt-for-password nil
   erc-hide-list '("JOIN" "PART" "QUIT")
   erc-autojoin-channels-alist
   '(("irc.freenode.net" "#emacs" "#archlinux")
     ("irc.gitter.im" "#ensime/ensime-server" "#ensime/ensime-emacs")))

  (defun my-setup-window-layout ()
    (call-interactively 'delete-other-windows)
    (switch-to-buffer "#ensime/ensime-server")
    (call-interactively 'evil-window-split)
    (call-interactively 'evil-window-vsplit) ;; Split window vertically
    (call-interactively 'evil-window-down)
    (call-interactively 'evil-window-vsplit)
    (switch-to-buffer "#ensime/ensime-emacs")
    (call-interactively 'evil-window-right)
    (switch-to-buffer "#emacs")
    (call-interactively 'evil-window-up)
    (switch-to-buffer "#archlinux")
    (window-configuration-to-register ?9))

  (defun my-freenode-force-join ()
    (switch-to-buffer "irc.freenode.net:6667")
    (erc-cmd-JOIN "#emacs")
    (switch-to-buffer "irc.freenode.net:6667")
    (erc-cmd-JOIN "#archlinux"))

  (setq irc-joined-count 0) ;; so hack.
  (defun my-maybe-setup-irc-windows ()
    (setq irc-joined-count (+ 1 irc-joined-count))
    (message "Got joined count: %s" irc-joined-count)
    (when (equal irc-joined-count 2)
      (my-freenode-force-join))
    (when (equal irc-joined-count 4)
      (my-setup-window-layout))
    )
  (add-hook 'erc-join-hook 'my-maybe-setup-irc-windows)

  (defun my-open-irc ()
    (interactive)
    (window-configuration-to-register ?8)
    (if (> 4 irc-joined-count)
        (progn
          (erc-tls :server "irc.gitter.im" :port 6697 :nick "kozikow" :password "")
          (erc :server "irc.freenode.net" :port 6667 :nick "kozikow" :password ""))
      (jump-to-register ?9)))
#+END_SRC
* Adapting config to your needs
** Different channels and account
I choose servers to connect to and auth method in my-join-irc.
Channels are a bit scattered due to freenode connection bug.
** Different layout
If you want different layout take a look at =my-setup-window-layout=.
I just call the methods I would be calling when setting this layout up and calling them with =call-interactively=.
I would set up an layout manually, and just look up functions using =C-h k=, and put them in elisp with =call-interactively=.
Similar concept is offered by [[https://www.emacswiki.org/emacs/KeyboardMacros][Emacs keyboard macros]], but we depend on hooks for timing, so we can't just use the macro.
** Line length
Default line wrapping and timestamps does not work well with windowed IRC layout.
I disabled the timestamp "on the right" and disabled the line wrapping.

#+BEGIN_SRC clojure :results output
  (erc-fill-mode -1)
  (setq erc-insert-timestamp-function 'erc-insert-timestamp-left)
#+END_SRC
** Adjust notifications
ERC by default have quite noisy notifications, especially for freenode chanells.
See https://www.emacswiki.org/emacs/ErcChannelTracking#toc6 .
** Auto re-connect
By default you need to guess when ERC lost connection and reconnect it.
I wrote little elisp that always "maybe" reconnects while calling =my-open-irc=
It have some quirks, but generally it works:
#+BEGIN_SRC clojure :results output
  (setq erc-join-buffer 'bury)

  (defun my-maybe-reconnect-buffer (buffer)
    (switch-to-buffer buffer)
    (when (not erc-server-connected)
      (erc-server-reconnect)))

  (defun my-maybe-reconnect-irc ()
    (mapc #'my-maybe-reconnect-buffer '("#emacs" "#ensime/ensime-server" "#archlinux" "#ensime/ensime-emacs")))

#+END_SRC

* How I use it
- Start emacs and call =my-open-irc=.
- Go back to old windows using =C-x r j 8=.
- Calling =my-open-irc= again opens the 2x2 irc windows layout and saves existing layout under =C-x r j 8=.

